!function(t,e,r,n){"use strict";function i(e){var r=[];return r.push('<div class="hortree-branch">'),t(e).each(function(){r.push(o(this))}),r.push("</div>"),r.join("\n")}function o(t){l++;var e=[];return e.push('<div class="hortree-entry" data-entry-id="'+l+'">'),t.tooltip&&""!==t.tooltip.toString().trim()?(e.push('<div class="hortree-label hortree-tooltip">'),e.push('<span class="hortree-tooltip-text">'+t.tooltip+"</span>"),e.push(t.description),e.push("</div>")):e.push('<div class="hortree-label">'+t.description+"</div>"),t.children.length&&e.push(i(t.children)),e.push("</div>"),e.join("\n")}function h(){var e=[];t(".hortree-entry").each(function(){var r=t(this).attr("data-entry-id");e.push({entryId:parseInt(r),entry:t(this)})});var r=e.slice(0);r.sort(function(t,e){return t.entryId-e.entryId}),r.reverse();for(var n=0;n<r.length;n++){var i=r[n].entry,o=i.children(".hortree-branch");if(o.length){var h=0;o.each(function(){h+=t(this).height()}),i.height(h)}}}function a(e){function r(t){for(var e=0,r=0;null!=t;e+=t.offsetLeft,r+=t.offsetTop,t=t.offsetParent);return{x:e,y:r}}t(".hortree-wrapper").each(function(){var n=t(this),i=0,o=0;n.find(".hortree-label").each(function(){if(0===o){i=t(this).offset().top*-1+20}if(t(this).siblings(".hortree-branch").length){var h=r(t(this).get(0));t(this).siblings(".hortree-branch").children(".hortree-entry").children(".hortree-label").each(function(){var o=r(t(this).get(0));n.line(h.x+t(this).width()-10,h.y+i,o.x,o.y+i,{zindex:e.lineZindex,color:e.lineColor,stroke:e.lineStrokeWidth})})}o++})})}function s(){t(".hortree-label").each(function(){var e=t(this).height();t(this).parent(".hortree-entry").height(e)})}var l=0;t.fn.hortree=function(e){e=e||{};var r={lineStrokeWidth:2,lineZindex:8,lineColor:"#4b86b7",data:[],onComplete:function(){}},n=t.extend(r,e);if(!t.fn.line)throw new Error("You must load jquery.line.js library! Get it here: https://github.com/tbem/jquery.line");if(!n.data)throw new Error("No data specified!");if(!(n.data instanceof Array))throw new Error("Data should be an array");n.data.length||console.warn("Data is empty");var o=[];o.push('<div class="hortree-wrapper">'),o.push(i(n.data)),o.push("</div>"),this.html(o.join("\n")),s(),h(),a(n),n.onComplete&&"function"==typeof n.onComplete&&n.onComplete.apply()}}(jQuery,window,document);
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImpxdWVyeS5ob3J0cmVlLmpzIl0sIm5hbWVzIjpbIiQiLCJ3aW5kb3ciLCJkb2N1bWVudCIsInVuZGVmaW5lZCIsImJyYW5jaCIsImxpc3QiLCJodG1sIiwicHVzaCIsImVhY2giLCJicmFuY2hMaXN0IiwidGhpcyIsImpvaW4iLCJlbGVtIiwiZW50cnlJZEluZGV4IiwidG9vbHRpcCIsInRvU3RyaW5nIiwidHJpbSIsImRlc2NyaXB0aW9uIiwiY2hpbGRyZW4iLCJsZW5ndGgiLCJhc3NpZ25CcmFuY2hIZWlnaHQiLCJ1bnNvcnRlZEVudHJpZXMiLCJlbnRyeUlkIiwiYXR0ciIsInBhcnNlSW50IiwiZW50cnkiLCJlbnRyaWVzIiwic2xpY2UiLCJzb3J0IiwiYSIsImIiLCJyZXZlcnNlIiwiaSIsImgiLCJoZWlnaHQiLCJkcmF3TGluZXMiLCJvcHRpb25zIiwiZ2V0UG9zIiwiZWwiLCJseCIsImx5Iiwib2Zmc2V0TGVmdCIsIm9mZnNldFRvcCIsIm9mZnNldFBhcmVudCIsIngiLCJ5IiwidHJlZSIsIm9mZnNldFkiLCJlbGVtZW50SW5kZXgiLCJmaW5kIiwib2Zmc2V0IiwidG9wIiwic2libGluZ3MiLCJwYXJlbnRQb3MiLCJnZXQiLCJjaGlsZFBvcyIsImxpbmUiLCJ3aWR0aCIsInppbmRleCIsImxpbmVaaW5kZXgiLCJjb2xvciIsImxpbmVDb2xvciIsInN0cm9rZSIsImxpbmVTdHJva2VXaWR0aCIsImFzc2lnbkVudHJ5SGVpZ2h0IiwicGFyZW50IiwiZm4iLCJob3J0cmVlIiwib3B0cyIsImRlZmF1bHRzIiwiZGF0YSIsIm9uQ29tcGxldGUiLCJleHRlbmQiLCJFcnJvciIsIkFycmF5IiwiY29uc29sZSIsIndhcm4iLCJhcHBseSIsImpRdWVyeSJdLCJtYXBwaW5ncyI6IkNBUUMsU0FBV0EsRUFBR0MsRUFBUUMsRUFBVUMsR0FFN0IsWUFJQSxTQUFTQyxHQUFPQyxHQUNaLEdBQUlDLEtBTUosT0FMQUEsR0FBS0MsS0FBSyxnQ0FDVlAsRUFBRUssR0FB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RUFBVXBDLEVBQUV3RSxPQUFPSCxFQUFVRCxFQUVqQyxLQUFLcEUsRUFBRWtFLEdBQUdWLEtBQ04sS0FBTSxJQUFJaUIsT0FBTSx5RkFFZixLQUFLckMsRUFBUWtDLEtBQ2QsS0FBTSxJQUFJRyxPQUFNLHFCQUVmLE1BQU1yQyxFQUFRa0MsZUFBZ0JJLFFBQy9CLEtBQU0sSUFBSUQsT0FBTSwwQkFFVnJDLEdBQVFrQyxLQUFLbkQsUUFDbkJ3RCxRQUFRQyxLQUFLLGdCQUdqQixJQUFJdEUsS0FDSkEsR0FBS0MsS0FBSyxpQ0FDVkQsRUFBS0MsS0FBS0gsRUFBT2dDLEVBQVFrQyxPQUN6QmhFLEVBQUtDLEtBQUssVUFFVkcsS0FBS0osS0FBS0EsRUFBS0ssS0FBSyxPQUVwQnFELElBQ0E1QyxJQUNBZSxFQUFVQyxHQUdKQSxFQUFRbUMsWUFBNEMsa0JBQXZCbkMsR0FBUW1DLFlBQ3ZDbkMsRUFBUW1DLFdBQVdNLFVBSzVCQyxPQUFRN0UsT0FBUUMiLCJmaWxlIjoianF1ZXJ5LmhvcnRyZWUuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxyXG4gKiAganF1ZXJ5LWhvcnRyZWUgLSB2MS4wLjBcclxuICogIFJlbmRlciBhbiBob3Jpem9udGFsIGhpZXJhcmNoaWNhbCB0cmVlIGZyb20gYSBKU09OIHNjaGVtYS5cclxuICogIGh0dHBzOi8vZ2l0aHViLmNvbS9hbGVzbWl0L2pxdWVyeS1ob3J0cmVlXHJcbiAqXHJcbiAqICBNYWRlIGJ5IEFsZXNzYW5kcm8gTWl0ZWxsaVxyXG4gKiAgVW5kZXIgTUlUIExpY2Vuc2VcclxuICovXHJcbjsoZnVuY3Rpb24gKCQsIHdpbmRvdywgZG9jdW1lbnQsIHVuZGVmaW5lZCkge1xyXG5cclxuICAgIFwidXNlIHN0cmljdFwiO1xyXG5cclxuICAgIHZhciBlbnRyeUlkSW5kZXggPSAwO1xyXG5cclxuICAgIGZ1bmN0aW9uIGJyYW5jaChsaXN0KSB7XHJcbiAgICAgICAgdmFyIGh0bWwgPSBbXTtcclxuICAgICAgICBodG1sLnB1c2goJzxkaXYgY2xhc3M9XCJob3J0cmVlLWJyYW5jaFwiPicpO1xyXG4gICAgICAgICQobGlzdCkuZWFjaChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGh0bWwucHVzaChicmFuY2hMaXN0KHRoaXMpKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICBodG1sLnB1c2goJzwvZGl2PicpO1xyXG4gICAgICAgIHJldHVybiBodG1sLmpvaW4oXCJcXG5cIik7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gYnJhbmNoTGlzdChlbGVtKSB7XHJcbiAgICAgICAgZW50cnlJZEluZGV4Kys7XHJcbiAgICAgICAgdmFyIGh0bWwgPSBbXTtcclxuICAgICAgICBodG1sLnB1c2goJzxkaXYgY2xhc3M9XCJob3J0cmVlLWVudHJ5XCIgZGF0YS1lbnRyeS1pZD1cIicgKyBlbnRyeUlkSW5kZXggKyAnXCI+Jyk7XHJcblxyXG4gICAgICAgIGlmIChlbGVtLnRvb2x0aXAgJiYgZWxlbS50b29sdGlwLnRvU3RyaW5nKCkudHJpbSgpICE9PSAnJykge1xyXG5cclxuICAgICAgICAgICAgaHRtbC5wdXNoKCc8ZGl2IGNsYXNzPVwiaG9ydHJlZS1sYWJlbCBob3J0cmVlLXRvb2x0aXBcIj4nKTtcclxuICAgICAgICAgICAgaHRtbC5wdXNoKCc8c3BhbiBjbGFzcz1cImhvcnRyZWUtdG9vbHRpcC10ZXh0XCI+JyArIGVsZW0udG9vbHRpcCArICc8L3NwYW4+Jyk7XHJcbiAgICAgICAgICAgIGh0bWwucHVzaChlbGVtLmRlc2NyaXB0aW9uKTtcclxuICAgICAgICAgICAgaHRtbC5wdXNoKCc8L2Rpdj4nKTtcclxuXHJcbiAgICAgICAgfSBlbHNlIHtcclxuXHJcbiAgICAgICAgICAgIGh0bWwucHVzaCgnPGRpdiBjbGFzcz1cImhvcnRyZWUtbGFiZWxcIj4nICsgZWxlbS5kZXNjcmlwdGlvbiArICc8L2Rpdj4nKTtcclxuXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoZWxlbS5jaGlsZHJlbi5sZW5ndGgpIHtcclxuICAgICAgICAgICAgaHRtbC5wdXNoKGJyYW5jaChlbGVtLmNoaWxkcmVuKSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBodG1sLnB1c2goJzwvZGl2PicpO1xyXG5cclxuICAgICAgICByZXR1cm4gaHRtbC5qb2luKFwiXFxuXCIpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogcHJldmVudCBlbnRyaWVzIG92ZXJsYXA6XHJcbiAgICAgKiBlYWNoIGJyYW5jaCBoZWlnaHQgc2hvdWxkIGJlIGVxdWFsIHRvIHRoZSB0b3RhbCBoZWlnaHRzIG9mIGl0cyBjaGlsZHJlbiBlbnRyaWVzXHJcbiAgICAgKi9cclxuICAgIGZ1bmN0aW9uIGFzc2lnbkJyYW5jaEhlaWdodCgpIHtcclxuXHJcbiAgICAgICAgLy8gZ2V0IGVudHJpZXMgdW5zb3J0ZWRcclxuICAgICAgICB2YXIgdW5zb3J0ZWRFbnRyaWVzID0gW107XHJcbiAgICAgICAgJCgnLmhvcnRyZWUtZW50cnknKS5lYWNoKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdmFyIGVudHJ5SWQgPSAkKHRoaXMpLmF0dHIoJ2RhdGEtZW50cnktaWQnKTtcclxuICAgICAgICAgICAgdW5zb3J0ZWRFbnRyaWVzLnB1c2goe1xyXG4gICAgICAgICAgICAgICAgZW50cnlJZDogcGFyc2VJbnQoZW50cnlJZCksXHJcbiAgICAgICAgICAgICAgICBlbnRyeTogJCh0aGlzKVxyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICAvLyBzb3J0IGVudHJpZXMgYnkgcmVuZGVyaW5nIG9yZGVyXHJcbiAgICAgICAgdmFyIGVudHJpZXMgPSB1bnNvcnRlZEVudHJpZXMuc2xpY2UoMCk7XHJcbiAgICAgICAgZW50cmllcy5zb3J0KGZ1bmN0aW9uIChhLCBiKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBhLmVudHJ5SWQgLSBiLmVudHJ5SWQ7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIC8vIGdldCBpdCBpbiByZXZlcnNlIG9yZGVyXHJcbiAgICAgICAgZW50cmllcy5yZXZlcnNlKCk7XHJcblxyXG4gICAgICAgIC8vIGl0ZXJhdGUgZWFjaCBlbnRyeVxyXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZW50cmllcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICB2YXIgZW50cnkgPSBlbnRyaWVzW2ldLmVudHJ5O1xyXG4gICAgICAgICAgICB2YXIgY2hpbGRyZW4gPSBlbnRyeS5jaGlsZHJlbignLmhvcnRyZWUtYnJhbmNoJyk7XHJcblxyXG4gICAgICAgICAgICAvLyBpZiB0aGlzIGVudHJ5IGhhcyBhIGJyYW5jaCAoaXQgaGFzIGNoaWxkcmVuIGVudHJpZXMpXHJcbiAgICAgICAgICAgIGlmICghIWNoaWxkcmVuLmxlbmd0aCkge1xyXG5cclxuICAgICAgICAgICAgICAgIC8vIHN1bSBlYWNoIGNoaWxkIGVudHJ5IGhlaWdodFxyXG4gICAgICAgICAgICAgICAgdmFyIGggPSAwO1xyXG4gICAgICAgICAgICAgICAgY2hpbGRyZW4uZWFjaChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaCArPSAkKHRoaXMpLmhlaWdodCgpO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gYW5kIGdpdmUgaXQgdG8gdGhlIHBhcmVudFxyXG4gICAgICAgICAgICAgICAgZW50cnkuaGVpZ2h0KGgpO1xyXG5cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBkcmF3IGxpbmVzIHNjaGVtYSBiZXR3ZWVuIGVudHJpZXNcclxuICAgICAqIEBwYXJhbSBvcHRpb25zXHJcbiAgICAgKi9cclxuICAgIGZ1bmN0aW9uIGRyYXdMaW5lcyhvcHRpb25zKSB7XHJcblxyXG4gICAgICAgIC8vIGdldCBuYXRpdmUgZWxlbWVudCBwb3NpdGlvblxyXG4gICAgICAgIGZ1bmN0aW9uIGdldFBvcyhlbCkge1xyXG4gICAgICAgICAgICBmb3IgKHZhciBseCA9IDAsIGx5ID0gMDsgZWwgIT0gbnVsbDsgbHggKz0gZWwub2Zmc2V0TGVmdCwgbHkgKz0gZWwub2Zmc2V0VG9wLCBlbCA9IGVsLm9mZnNldFBhcmVudCk7XHJcbiAgICAgICAgICAgIHJldHVybiB7eDogbHgsIHk6IGx5fTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIGRyYXcgbGluZXMgZm9yIGVhY2ggaGllcmFyY2hpY2FsIHRyZWUgaW4gdGhlIHBhZ2VcclxuICAgICAgICAkKCcuaG9ydHJlZS13cmFwcGVyJykuZWFjaChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHZhciB0cmVlID0gJCh0aGlzKTtcclxuXHJcbiAgICAgICAgICAgIHZhciBvZmZzZXRZID0gMDsgLy8gb2Zmc2V0IFkgaXMgc2V0IG9uIGZpcnN0IGVsZW1lbnQgaXRlcmF0aW9uXHJcbiAgICAgICAgICAgIHZhciBlbGVtZW50SW5kZXggPSAwO1xyXG5cclxuICAgICAgICAgICAgLy8gaXRlcmF0ZSBvdmVyIGVudHJpZXMgY29udGVudFxyXG4gICAgICAgICAgICB0cmVlLmZpbmQoJy5ob3J0cmVlLWxhYmVsJykuZWFjaChmdW5jdGlvbiAoKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gc2V0IFkgb2Zmc2V0IHBvcyB3aGVyZSB0byByZW5kZXIgZWFjaCBsaW5lXHJcbiAgICAgICAgICAgICAgICBpZiAoZWxlbWVudEluZGV4ID09PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIG9mZnNldFRvcCA9ICQodGhpcykub2Zmc2V0KCkudG9wO1xyXG4gICAgICAgICAgICAgICAgICAgIG9mZnNldFkgPSAob2Zmc2V0VG9wICogLTEpICsgMjA7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gaWYgaXQgaGFzIGNoaWxkcmVuIHRoZW4gZHJhdyBsaW5lXHJcbiAgICAgICAgICAgICAgICBpZiAoISEkKHRoaXMpLnNpYmxpbmdzKCcuaG9ydHJlZS1icmFuY2gnKS5sZW5ndGgpIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gcGFyZW50IHBvc2l0aW9uXHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHBhcmVudFBvcyA9IGdldFBvcygkKHRoaXMpLmdldCgwKSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIC8vIGdldCBwb3NpdGlvbiBvZiBlYWNoIGNoaWxkXHJcbiAgICAgICAgICAgICAgICAgICAgJCh0aGlzKS5zaWJsaW5ncygnLmhvcnRyZWUtYnJhbmNoJylcclxuICAgICAgICAgICAgICAgICAgICAgICAgLmNoaWxkcmVuKCcuaG9ydHJlZS1lbnRyeScpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC5jaGlsZHJlbignLmhvcnRyZWUtbGFiZWwnKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAuZWFjaChmdW5jdGlvbiAoKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGNoaWxkUG9zID0gZ2V0UG9zKCQodGhpcykuZ2V0KDApKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBkcmF3IGxpbmUgYmV0d2VlbiB0d28gcG9pbnRzXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0cmVlLmxpbmUoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFyZW50UG9zLnggKyAkKHRoaXMpLndpZHRoKCkgLSAxMCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXJlbnRQb3MueSArIG9mZnNldFksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hpbGRQb3MueCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGlsZFBvcy55ICsgb2Zmc2V0WSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHppbmRleDogb3B0aW9ucy5saW5lWmluZGV4LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2xvcjogb3B0aW9ucy5saW5lQ29sb3IsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0cm9rZTogb3B0aW9ucy5saW5lU3Ryb2tlV2lkdGhcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pXHJcblxyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGVsZW1lbnRJbmRleCsrO1xyXG5cclxuICAgICAgICAgICAgfSlcclxuXHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBzZXQgZWFjaCBlbnRyeSBoZWlnaHQgYmFzZWQgb24gaXRzIGxhYmVsIGNvbnRlbnRcclxuICAgICAqL1xyXG4gICAgZnVuY3Rpb24gYXNzaWduRW50cnlIZWlnaHQoKSB7XHJcbiAgICAgICAgJCgnLmhvcnRyZWUtbGFiZWwnKS5lYWNoKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdmFyIGggPSAkKHRoaXMpLmhlaWdodCgpO1xyXG4gICAgICAgICAgICAkKHRoaXMpLnBhcmVudCgnLmhvcnRyZWUtZW50cnknKS5oZWlnaHQoaCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBUaGUgcGx1Z2luXHJcbiAgICAgKiBAcGFyYW0gb3B0c1xyXG4gICAgICovXHJcbiAgICAkLmZuLmhvcnRyZWUgPSBmdW5jdGlvbiAob3B0cykge1xyXG4gICAgICAgIG9wdHMgPSBvcHRzIHx8IHt9O1xyXG5cclxuICAgICAgICAvLyBkZWZhdWx0IG9wdGlvbnNcclxuICAgICAgICB2YXIgZGVmYXVsdHMgPSB7XHJcbiAgICAgICAgICAgIGxpbmVTdHJva2VXaWR0aDogMixcclxuICAgICAgICAgICAgbGluZVppbmRleDogOCxcclxuICAgICAgICAgICAgbGluZUNvbG9yOiAnIzRiODZiNycsXHJcbiAgICAgICAgICAgIGRhdGE6IFtdLFxyXG4gICAgICAgICAgICBvbkNvbXBsZXRlOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBvbkNvbXBsZXRlIGNhbGxiYWNrXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICB2YXIgb3B0aW9ucyA9ICQuZXh0ZW5kKGRlZmF1bHRzLCBvcHRzKTtcclxuXHJcbiAgICAgICAgaWYgKCEkLmZuLmxpbmUpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiWW91IG11c3QgbG9hZCBqcXVlcnkubGluZS5qcyBsaWJyYXJ5ISBHZXQgaXQgaGVyZTogaHR0cHM6Ly9naXRodWIuY29tL3RiZW0vanF1ZXJ5LmxpbmVcIik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKCFvcHRpb25zLmRhdGEpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTm8gZGF0YSBzcGVjaWZpZWQhXCIpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmICghKG9wdGlvbnMuZGF0YSBpbnN0YW5jZW9mIEFycmF5KSkge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJEYXRhIHNob3VsZCBiZSBhbiBhcnJheVwiKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAoIW9wdGlvbnMuZGF0YS5sZW5ndGgpIHtcclxuICAgICAgICAgICAgY29uc29sZS53YXJuKFwiRGF0YSBpcyBlbXB0eVwiKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHZhciBodG1sID0gW107XHJcbiAgICAgICAgaHRtbC5wdXNoKCc8ZGl2IGNsYXNzPVwiaG9ydHJlZS13cmFwcGVyXCI+Jyk7XHJcbiAgICAgICAgaHRtbC5wdXNoKGJyYW5jaChvcHRpb25zLmRhdGEpKTtcclxuICAgICAgICBodG1sLnB1c2goJzwvZGl2PicpO1xyXG5cclxuICAgICAgICB0aGlzLmh0bWwoaHRtbC5qb2luKCdcXG4nKSk7XHJcblxyXG4gICAgICAgIGFzc2lnbkVudHJ5SGVpZ2h0KCk7XHJcbiAgICAgICAgYXNzaWduQnJhbmNoSGVpZ2h0KCk7XHJcbiAgICAgICAgZHJhd0xpbmVzKG9wdGlvbnMpO1xyXG5cclxuICAgICAgICAvLyBleGVjdXRlIG9uQ29tcGxldGUgY2FsbGJhY2tcclxuICAgICAgICBpZiAoISFvcHRpb25zLm9uQ29tcGxldGUgJiYgdHlwZW9mIG9wdGlvbnMub25Db21wbGV0ZSA9PT0gJ2Z1bmN0aW9uJykge1xyXG4gICAgICAgICAgICBvcHRpb25zLm9uQ29tcGxldGUuYXBwbHkoKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgfVxyXG5cclxufSkoalF1ZXJ5LCB3aW5kb3csIGRvY3VtZW50KTtcclxuIl19
