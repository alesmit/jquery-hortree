!function(e,t,r,n){"use strict";function i(t){var r=[];return r.push('<div class="hortree-branch">'),e(t).each(function(){r.push(o(this))}),r.push("</div>"),r.join("\n")}function o(e){l++;var t=[];return t.push('<div class="hortree-entry" data-entry-id="'+l+'">'),e.tooltip&&""!==e.tooltip.toString().trim()?(t.push('<div class="hortree-label hortree-tooltip">'),t.push('<span class="hortree-tooltip-text">'+e.tooltip+"</span>"),t.push(e.description),t.push("</div>")):t.push('<div class="hortree-label">'+e.description+"</div>"),e.children.length&&t.push(i(e.children)),t.push("</div>"),t.join("\n")}function h(){var t=[];e(".hortree-entry").each(function(){var r=e(this).attr("data-entry-id");t.push({entryId:parseInt(r),entry:e(this)})});var r=t.slice(0);r.sort(function(e,t){return e.entryId-t.entryId}),r.reverse();for(var n=0;n<r.length;n++){var i=r[n].entry,o=i.children(".hortree-branch");if(o.length){var h=0;o.each(function(){h+=e(this).height()}),i.height(h)}}}function a(t){function r(t){for(var r=0,n=0;null!==t&&(r+=t.offsetLeft,n+=t.offsetTop,t=t.offsetParent,!e(".hortree-wrapper").is(t)););return{x:r,y:n}}e(".hortree-wrapper").each(function(){var n=e(this),i=0,o=0;n.find(".hortree-label").each(function(){if(0===o){var h=e(this).offset().top;i=-1*h+20}if(e(this).siblings(".hortree-branch").length){var a=r(e(this).get(0));e(this).siblings(".hortree-branch").children(".hortree-entry").children(".hortree-label").each(function(){var o=r(e(this).get(0));n.line(a.x+e(this).width()-10,a.y+i,o.x,o.y+i,{zindex:t.lineZindex,color:t.lineColor,stroke:t.lineStrokeWidth})})}o++})})}function s(){e(".hortree-label").each(function(){var t=e(this).height();e(this).parent(".hortree-entry").height(t)})}var l=0;e.fn.hortree=function(t){t=t||{};var r={lineStrokeWidth:2,lineZindex:8,lineColor:"#4b86b7",data:[],onComplete:function(){}},n=e.extend(r,t);if(!e.fn.line)throw new Error("You must load jquery.line.js library! Get it here: https://github.com/tbem/jquery.line");if(!n.data)throw new Error("No data specified!");if(!(n.data instanceof Array))throw new Error("Data should be an array");n.data.length||console.warn("Data is empty");var o=[];o.push('<div class="hortree-wrapper">'),o.push(i(n.data)),o.push("</div>"),this.html(o.join("\n")),s(),h(),a(n),n.onComplete&&"function"==typeof n.onComplete&&n.onComplete.apply()}}(jQuery,window,document);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
